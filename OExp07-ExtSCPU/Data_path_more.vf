////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path_more.vf
// /___/   /\     Timestamp : 04/16/2019 16:23:43
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath Z:/Verilog/OExp07-ExtSCPU/ipcore_dir -intstyle ise -family kintex7 -verilog Z:/Verilog/OExp07-ExtSCPU/Data_path_more.vf -w Z:/Verilog/OExp07-ExtSCPU/Data_path_more.sch
//Design Name: Data_path_more
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module alu_MUSER_Data_path_more(A, 
                                ALU_operation, 
                                B, 
                                overflow, 
                                res, 
                                zero);

    input [31:0] A;
    input [2:0] ALU_operation;
    input [31:0] B;
   output overflow;
   output [31:0] res;
   output zero;
   
   wire N0;
   wire [32:0] S;
   wire [31:0] XLXN_1;
   wire [31:0] XLXN_13;
   wire [31:0] XLXN_15;
   wire [31:0] XLXN_21;
   wire [31:0] XLXN_23;
   wire [31:0] XLXN_27;
   wire [31:0] XLXN_31;
   wire [31:0] res_DUMMY;
   
   assign res[31:0] = res_DUMMY[31:0];
   ADC32  ADC_32 (.A(A[31:0]), 
                 .B(XLXN_23[31:0]), 
                 .C0(ALU_operation[2]), 
                 .S(S[32:0]));
   and32  ALU_U1 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_1[31:0]));
   or32  ALU_U2 (.A(A[31:0]), 
                .B(B[31:0]), 
                .res(XLXN_31[31:0]));
   xor32  ALU_U3 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_27[31:0]));
   nor32  ALU_U4 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_13[31:0]));
   srl32  ALU_U5 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_15[31:0]));
   xor32  ALU_U7 (.A(XLXN_21[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_23[31:0]));
   or_bit_32  ALU_Zero (.A(res_DUMMY[31:0]), 
                       .o(zero));
   MUX8T1_32  MUXALU (.I0(XLXN_1[31:0]), 
                     .I1(XLXN_31[31:0]), 
                     .I2(S[31:0]), 
                     .I3(XLXN_27[31:0]), 
                     .I4(XLXN_13[31:0]), 
                     .I5(XLXN_15[31:0]), 
                     .I6(S[31:0]), 
                     .I7({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, S[32]}), 
                     .s(ALU_operation[2:0]), 
                     .o(res_DUMMY[31:0]));
   SignalExt_32  Signal1_32 (.S(ALU_operation[2]), 
                            .So(XLXN_21[31:0]));
   GND  XLXI_8 (.G(N0));
endmodule
`timescale 1ns / 1ps

module Data_path_more(ALUSrc_B, 
                      ALU_Control, 
                      Branch, 
                      clk, 
                      DatatoReg, 
                      Data_in, 
                      inst_field, 
                      Jal, 
                      RegDst, 
                      RegWrite, 
                      rst, 
                      ALU_out, 
                      Data_out, 
                      overflow, 
                      PC_out, 
                      zero);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input [1:0] Branch;
    input clk;
    input [1:0] DatatoReg;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jal;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output overflow;
   output [31:0] PC_out;
   output zero;
   
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] PC_4;
   wire [31:0] rdata_A;
   wire V5;
   wire [31:0] XLXN_3;
   wire [31:0] XLXN_9;
   wire [4:0] XLXN_10;
   wire [31:0] XLXN_35;
   wire [31:0] XLXN_40;
   wire [4:0] XLXN_61;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   add_32  ADD_Branch (.a(PC_4[31:0]), 
                      .b({Imm_32[29:0], N0, N0}), 
                      .c(XLXN_35[31:0]));
   add_32  ADD_PC_4 (.a(PC_out_DUMMY[31:0]), 
                    .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                    .c(PC_4[31:0]));
   Ext_32  Ext (.imm_16(inst_field[15:0]), 
               .Imm_32(Imm_32[31:0]));
   MUX2T1_5  MUXD1 (.I0(XLXN_61[4:0]), 
                   .I1(inst_field[15:11]), 
                   .s(RegDst), 
                   .o(XLXN_10[4:0]));
   MUX2T1_5  MUXD2 (.I0(inst_field[20:16]), 
                   .I1({V5, V5, V5, V5, V5}), 
                   .s(Jal), 
                   .o(XLXN_61[4:0]));
   MUX2T1_32  MUXD3 (.I0(Data_out_DUMMY[31:0]), 
                    .I1(Imm_32[31:0]), 
                    .s(ALUSrc_B), 
                    .o(XLXN_3[31:0]));
   MUX4T1_32  MUXD4 (.I0(ALU_out_DUMMY[31:0]), 
                    .I1(Data_in[31:0]), 
                    .I2({inst_field[15:0], N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0}), 
                    .I3(PC_4[31:0]), 
                    .s(DatatoReg[1:0]), 
                    .o(XLXN_9[31:0]));
   MUX4T1_32  MUXD5 (.I0(PC_4[31:0]), 
                    .I1(XLXN_35[31:0]), 
                    .I2({PC_4[31:28], inst_field[25:0], N0, N0}), 
                    .I3(rdata_A[31:0]), 
                    .s(Branch[1:0]), 
                    .o(XLXN_40[31:0]));
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(XLXN_40[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   alu_MUSER_Data_path_more  U1_1 (.A(rdata_A[31:0]), 
                                  .ALU_operation(ALU_Control[2:0]), 
                                  .B(XLXN_3[31:0]), 
                                  .overflow(overflow), 
                                  .res(ALU_out_DUMMY[31:0]), 
                                  .zero(zero));
   Regs  U2_2 (.clk(clk), 
              .L_S(RegWrite), 
              .rst(rst), 
              .R_addr_A(inst_field[25:21]), 
              .R_addr_B(inst_field[20:16]), 
              .Wt_addr(XLXN_10[4:0]), 
              .Wt_data(XLXN_9[31:0]), 
              .rdata_A(rdata_A[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   VCC  XLXI_5 (.P(V5));
   GND  XLXI_14 (.G(N0));
endmodule
